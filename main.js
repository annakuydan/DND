(()=>{"use strict";function t(t,e){const n=t,s=e;let i=null,o=null,l=null;s.addEventListener("mousedown",(t=>{const e=function(t){const e=t.getBoundingClientRect();return{top:e.top+window.scrollX,left:e.left+window.scrollX}}(s),c=t.pageX-e.left,r=t.pageY-e.top;function a(t){s.style.left=t.pageX-c+"px",s.style.top=t.pageY-r+"px"}if("close"!==t.target.dataset.toggle){if(t.preventDefault(),i)return;l=document.createElement("div"),l.style.height=`${s.offsetHeight}px`,l.style.backgroundColor="#7b9bb1",s.parentElement.insertBefore(l,s),o=t.target.closest(".column").dataset.id,i=t.target,s.classList.add("dragged"),document.body.appendChild(s),a(t);const e=function(t){t.preventDefault(),i&&a(t)};n.addEventListener("mousemove",e),n.addEventListener("mouseup",(c=>{if(!i)return;l.remove();const r=document.elementFromPoint(c.clientX,c.clientY),a=JSON.parse(localStorage.columns),d=r.closest(".column"),u=d.dataset.id,m=a[o].findIndex((t=>t.id===+s.dataset.id)),h=a[o].splice(m,1);if("tikets-container"!==r.className){let e=r.closest(".tiket-group");if(!e)return;{const n=e.getBoundingClientRect().y+e.getBoundingClientRect().height/2;if(t.clientY>n){if(null===e.nextElementSibling)return;e=e.nextElementSibling}if(e.parentElement.insertBefore(s,e),s.classList.remove("dragged"),s.style.top=null,s.style.left=null,o===u){const t=a[o].findIndex((t=>t.id===+e.dataset.id));a[o].splice(t,0,h[0])}else{const t=a[u].findIndex((t=>t.id===+e.dataset.id));a[u].splice(t,0,h[0])}}}if("tikets-container"===r.className){Object.prototype.hasOwnProperty.call(a,u)||(a[u]=[]),h[0]&&a[u].push(h[0]),s.classList.remove("dragged"),n.removeEventListener("mousemove",e);d.querySelector(".tikets").append(s),s.style.top=null,s.style.left=null}localStorage.setItem("columns",JSON.stringify(a)),i=null}))}}))}class e{constructor(t){this.container=t,this.tiketgroup=null}bindToDom(t){this.tiketgroup=document.createElement("div"),this.tiketgroup.classList.add("tiket-group"),this.tiketgroup.setAttribute("data-id",t.id),this.tiketgroup.setAttribute("data-type","item"),this.tiketgroup.setAttribute("draggable","true"),this.tiketgroup.innerHTML='\n       <div class = "tiket"></div>\n       <button class="closeBtn" data-toggle="close">X</button>',this.tiketgroup.querySelector(".tiket").innerText=t.text,this.container.append(this.tiketgroup),this.closeTiketBtn()}closeTiketBtn(){const e=this.tiketgroup.querySelector(".closeBtn");this.tiketgroup.addEventListener("mouseover",(()=>{e.classList.add("hidden")})),this.tiketgroup.addEventListener("mouseout",(()=>{e.classList.remove("hidden")})),e.addEventListener("click",(()=>{this.tiketgroup.parentNode.removeChild(this.tiketgroup);const t=JSON.parse(localStorage.columns),e=this.container.closest(".column").dataset.id,n=t[e].findIndex((t=>t.id===+this.tiketgroup.dataset.id));t[e].splice(n,1),localStorage.setItem("columns",JSON.stringify(t))})),t(this.container.closest(".columns"),this.tiketgroup)}}class n{constructor(){this.container=null,this.form=document.createElement("form")}init(){this.form.setAttribute("novalidate","novalidate"),this.form.setAttribute("id","item-form"),this.form.innerHTML='\n       <textarea id="text" class="input" name="text" rows="3" cols="33" \n       placeholder="text" autocomplete="off"></textarea>\n       <div class=\'button-container\'>\n         <button type="submit" class="btnSubmit">Подтверждаю</button>\n         <button class="btnReset">X</button>\n       </div>',this.container.append(this.form),this.formElements=[...this.form.elements]}bindToDOM(t){this.container=t,this.init(),this.events()}events(){this.form.querySelector(".btnReset").addEventListener("click",(()=>this.closeForm())),this.form.addEventListener("submit",(t=>this.onSubmit(t)))}closeForm(){this.form.parentNode.removeChild(this.form)}onSubmit(t){t.preventDefault();const n={};this.formElements.forEach((t=>{t.name&&(n[t.name]=t.value)}));new e(this.container.querySelector(".tikets")).bindToDom(n),this.closeForm(),localStorage.getItem("columns")||localStorage.setItem("columns",JSON.stringify({}));const s=JSON.parse(localStorage.columns);Object.prototype.hasOwnProperty.call(s,this.container.dataset.id)||(s[this.container.dataset.id]=[]),s[this.container.dataset.id].push(n),localStorage.setItem("columns",JSON.stringify(s))}}class s{constructor(t){this.container=t,this.column=null}bindToDOM(t){this.column=document.createElement("div"),this.column.classList.add("column"),this.column.classList.add("column-droppable"),this.column.setAttribute("data-id",t.id),this.column.innerHTML=`\n      <h3 class = "title">${t.title}</h3>\n      <button class="btn"> + Добавить тикет</button>\n     <div class="tikets-container" data-type = "column">\n     <div class="tikets">\n     </div>\n     </div>\n     <div class="form-container"></div>\n     `,this.container.append(this.column),this.localColumn(t.id),this.addBtn()}addBtn(){this.column.querySelector(".btn").addEventListener("click",(()=>this.addItem()))}addItem(){if(!this.column.querySelector("form")&&!document.querySelector(".dragged")){(new n).bindToDOM(this.column)}}localColumn(t){if(localStorage.columns){const n=JSON.parse(localStorage.columns);n&&n[t]&&n[t].forEach((t=>{new e(this.column.querySelector(".tikets")).bindToDom(t)}))}}}new class{constructor(t){this.container=t,this.columns=document.querySelector(".columns")}bindToDOM(){this.InitColumns(),this.container.append(this.columns)}InitColumns(){this.column1=new s(this.columns),this.column2=new s(this.columns),this.column3=new s(this.columns),this.column1.bindToDOM({class:"column1",title:"TODO",id:"1"}),this.column2.bindToDOM({class:"column2",title:"In progress",id:"2"}),this.column3.bindToDOM({class:"column3",title:"Done",id:"3"})}}(document.querySelector(".trello")).bindToDOM()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,